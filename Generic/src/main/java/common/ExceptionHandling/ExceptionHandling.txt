Summary:

An exception is an error that happens at the time of execution of a program.

Try-catch: This method can catch Exceptions, which uses a combination of the try and catch keywords.

Multiple catches help you to handle every type of Exception separately with a separate block of code.

Throw keyword is used to throw Exception to handle it in the run time.

printStackTrace(): This function prints stack trace, name of the Exception, and other useful description

toString(): This function returns a text message describing the exception name and description.

getMessage(): Helps to displays the description of the Exception.


Try-catch: This method can catch Exceptions, which uses a combination of the try and catch keywords.
Try command indicates the start of the block, and Catch is placed at the end of the try block, which helps
to resolve the Exception.

try
{
// Code
} catch (Exception e) {
// Code for Handling exception
}


Multiple catch blocks: There are various types of Exceptions, and you can expect more than one exception
from a single block of code. Multiple catches help you to handle every type of Exception separately with
a separate block of code. It can be used for more than two catch blocks, and there is no limitation on the
number of catch blocks.

try
{
//Code
} catch (ExceptionType1 e1) {
//Code for Handling Exception 1
} catch (ExceptionType2 e2) {
//Code for Handling Exception 2
}

Throw: When you want to generate an Exception, the Throw keyword is used to throw Exception to handle it
in the run time. When you are throwing an Exception without handling it, then they need to use Throw keyword

public static void anyFunction() throws Exception{

try {
// write your code here
} Catch (Exception b) {
// Do whatever you want to perform
// Throw the Exception back to the system
throw(b);
}
}

Multiple Exceptions: You can mention various Exceptions in the throws clause.

public static void anyFunction() throws ExceptionType1, ExceptionType2{

try {
// write your code here
} catch (ExceptionType1 e1) {
// Code to handle exception 1
} catch (ExceptionType1 e2) {
// Code to handle exception 2
}

Finally: The Final keyword is used to create a block of code under the try block.
It is the final code that helps you to executes irrespective of the occurrence of an exception

try {
//Code
} catch (ExceptionType1 e1) {
//Catch block
} catch (ExceptionType2 e2) {
//Catch block
} catch (ExceptionType3 e3) {
//Catch block
} finally { //The finally block always executes.
}